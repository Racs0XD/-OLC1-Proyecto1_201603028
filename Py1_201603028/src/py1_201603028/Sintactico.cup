package py1_201603028;
import java_cup.runtime.*;
import py1_201603028.Nodo.*;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

parser code
{:
public static int contID=1;
public static int IDS=1;
public static Nodo Raiz;

public static void graficarArbol(Nodo act, String nombre){
        FileWriter fichero = null;
        PrintWriter pw = null;
        try {
            fichero = new FileWriter("src/main/java/ARBOLES/" + nombre + ".dot");
            pw = new PrintWriter(fichero);
            pw.println("digraph G{");
            pw.println("rankdir=UD");
            pw.println("node[shape=box]");
            pw.println("concentrate=true");
            pw.println(act.getCodigoInterno());
            pw.println("}");
        } catch (Exception e) {
            System.out.println("error, no se realizo el archivo"+e);
        } finally {
            try {
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        //para compilar el archivo dot y obtener la imagen
        try {
            //dirección doonde se ecnuentra el compilador de graphviz
            String dotPath = "C:\\Program Files\\Graphviz\\bin\\dot.exe";
            //dirección del archivo dot
            String fileInputPath = "src/main/java/ARBOLES/" + nombre + ".dot";
            //dirección donde se creara la magen
            String fileOutputPath = "src/main/java/ARBOLES/" + nombre + ".jpg";
            //tipo de conversón
            String tParam = "-Tjpg";
            String tOParam = "-o";

            String[] cmd = new String[5];
            cmd[0] = dotPath;
            cmd[1] = tParam;
            cmd[2] = fileInputPath;
            cmd[3] = tOParam;
            cmd[4] = fileOutputPath;

            Runtime rt = Runtime.getRuntime();

            rt.exec(cmd);

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
        }
    }

:}

/* Declaración de los símbolos terminales */
terminal String punto, mas, asterisco, pipe, interrogante, llave_a, llave_c, id, id_ERegular, c_ERegular, c_Especial, punto_coma, dos_puntos, menos, mayorq;

/* Declaración de los símbolos no terminales */
non terminal String Inicio, Sentencia, PrimerB;
non terminal Nodo NOTACION_ERegular, ERegular;

/* Precedencia */
precedence left mas, asterisco, interrogante;
precedence left punto, pipe;

/* Declaración de la producción inicial */
start with Inicio;

/* Expresiones Regulares */
Inicio::= Sentencia{:
:};

Sentencia ::= llave_a PrimerB llave_c;

PrimerB ::= PrimerB ERegular
|ERegular; 

ERegular::= id:a menos mayorq NOTACION_ERegular:valor{:
:}punto_coma
;

NOTACION_ERegular ::= pipe NOTACION_ERegular:a NOTACION_ERegular:b{:
String anulable;
if(a.getAnulable()=="A"||b.getAnulable()=="a"){
anulable = "A";
}else{
anulable = "N"
}
String primero = a.getPrimero() + b.getPrimero();
String ultimo = a.getUltimo() + b.getUltimo();

Nodo nuevo_pipe = new Nodo(a,b,"|",parser.contID,0,anulable,primero,ultimo);
parser.contID++;
resultado = nuevo_pipe;
:}


