package ANALIZADOR;
import java_cup.runtime.*;
import py1_201603028.*;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Iterator;
parser code
{:
public static int contID=1;
public static int IDS=1;
public static Nodo Raiz;
public static ArrayList<ArrayList<Object>> Tabla_Sig = new ArrayList<>();
public static ArrayList<ArrayList<Object>> Tabla_Transi = new ArrayList<>();
public static void graficarArbol(Nodo act, String nombre){
        FileWriter fichero = null;
        PrintWriter pw = null;
        try {
            fichero = new FileWriter("src/ARBOLES_201603028/" + nombre + ".dot");
            pw = new PrintWriter(fichero);
            pw.println("digraph G{");
            pw.println("rankdir=UD");
            pw.println("node[shape=box]");
            pw.println("concentrate=true");
            pw.println(act.getCodigoInterno());            
            pw.println("}");
            act.getCodigo();   
            
            String nombreLista = nombre;
            ArrayList<SIGUIENTES> nuevaLista = new ArrayList<>();
            for (SIGUIENTES hoja : act.getL()) {
                nuevaLista.add(hoja);
            }
            ArrayList<Object> listaConNombre = new ArrayList<>();
            listaConNombre.add(nombreLista);
            listaConNombre.add(nuevaLista);


            ArrayList<ESTADOS> nuevaListaR = new ArrayList<>();
            for (ESTADOS sig : act.getR()) {
                nuevaListaR.add(sig);
            }
            ArrayList<Object> listaConNombreR = new ArrayList<>();
            listaConNombreR.add(nombreLista);
            listaConNombreR.add(nuevaListaR);

            boolean listaExiste = false;
            for (ArrayList<Object> lista : Tabla_Sig) {
                if (lista.get(0).equals(nombreLista)) {
                    lista.set(1, nuevaLista); // Actualizar la lista existente con los nuevos datos
                    listaExiste = true;
                    break;
                }
            }

            if (!listaExiste) {
                Tabla_Sig.add(listaConNombre); // Agregar una nueva lista con nombre
                Tabla_Transi.add(listaConNombreR);
            }
            act.getSO();
            Reportes rep = new Reportes();
            rep.Graficar_Tabla_Sig(Tabla_Sig);
            rep.Tabla_Transiciones(Tabla_Transi);
            rep.Aceptacion(act.getL(), act.getR(),nombre);
            
            act.clearL();

        } catch (Exception e) {
            System.out.println("error, no se realizo el archivo"+e);
        } finally {
            try {
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }

        //para compilar el archivo dot y obtener la imagen
        try {
            //dirección doonde se ecnuentra el compilador de graphviz
            String dotPath = "C:\\Program Files\\Graphviz\\bin\\dot.exe";
            //dirección del archivo dot
            String fileInputPath = "src/ARBOLES_201603028/" + nombre + ".dot";
            //dirección donde se creara la magen
            String fileOutputPath = "src/ARBOLES_201603028/" + nombre + ".jpg";
            //tipo de conversón
            String tParam = "-Tjpg";
            String tOParam = "-o";

            String[] cmd = new String[5];
            cmd[0] = dotPath;
            cmd[1] = tParam;
            cmd[2] = fileInputPath;
            cmd[3] = tOParam;
            cmd[4] = fileOutputPath;

            Runtime rt = Runtime.getRuntime();

            rt.exec(cmd);

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
        }
    }
private Symbol SError;

public void syntax_error(Symbol SError){
this.SError = SError;
}
public Symbol getSErr(){
return this.SError;
}
public static ArrayList<String> crearListaConNombre(String nombreLista) {
    ArrayList<String> nuevaLista = new ArrayList<>();
    nuevaLista.add(nombreLista); // Agregamos el nombre de la lista como primer elemento
    return nuevaLista;
}




:}

action code{:
:}

/* Declaración de los símbolos terminales */
terminal String reservada, dos_puntos, punto, mas, asterisco, pipe, interrogante, conj, llave_a, llave_c, id, id_ERegular, c_ERegular, c_Especial, punto_coma, menos, mayorq, E_Prueba;

/* Declaración de los símbolos no terminales */
non terminal String Inicio, Sentencia, PrimerB, Conjunto, Prueba_E;
non terminal Nodo NOTACION_ERegular, ERegular;

/* Precedencia */
precedence left mas, asterisco, interrogante;
precedence left punto, pipe;

/* Declaración de la producción inicial */
start with Inicio;

/* Expresiones Regulares */
Inicio::= Sentencia{:
    :};

Sentencia ::= llave_a PrimerB llave_c;

PrimerB ::= PrimerB Conjunto
        |Conjunto
        |PrimerB ERegular
        |ERegular
        |PrimerB Prueba_E
        |Prueba_E
;

Conjunto::= reservada dos_puntos id menos mayorq conj punto_coma
;

Prueba_E::= id dos_puntos E_Prueba punto_coma
;

ERegular::= id:a menos mayorq NOTACION_ERegular:valor{:
        String primero = IDS+"";
        String ultimo = IDS+"";
        String prime;
        String ulti;
        Nodo nuevo_final = new Nodo(null,null,"#",parser.contID,parser.IDS,"N",primero,ultimo);
        parser.contID++;
        if(valor.getAnulable()=="A"){
            prime=valor.getPrimero()+ultimo;
        }else{
            prime=valor.getPrimero();
        }
        ulti=nuevo_final.getUltimo();
        Nodo nueva_raiz = new Nodo(valor,nuevo_final,".",parser.contID,0,"N",primero,ultimo);
        parser.Raiz=nueva_raiz;
        graficarArbol(nueva_raiz,a);
        IDS=1;
:}punto_coma
;

NOTACION_ERegular ::= pipe NOTACION_ERegular:a NOTACION_ERegular:b{:
        String anulable;
        if(a.getAnulable()=="A" || b.getAnulable()=="A"){
        anulable = "A";
        }else{
        anulable = "N";
        }
        String primero = a.getPrimero() + b.getPrimero();
        String ultimo = a.getUltimo() + b.getUltimo();

        Nodo nuevo_pipe = new Nodo(a,b,"|",parser.contID,0,anulable,primero,ultimo);
        parser.contID++;
        RESULT = nuevo_pipe;
:}
|punto NOTACION_ERegular:a NOTACION_ERegular:b{:
        String anulable;
        String primero;
        String ultimo;
        if(a.getAnulable()=="A" && b.getAnulable()=="A"){
        anulable="A";
        }else{
        anulable = "N";
        }
        if(a.getAnulable()=="A"){ 
        primero = a.getPrimero()+b.getPrimero();
        }else{
        primero = a.getPrimero();
        }
        if(b.getAnulable()=="A"){
        ultimo = a.getUltimo()+b.getUltimo();
        }else{
        ultimo = b.getUltimo();
        }
        Nodo nuevo_punto = new Nodo(a,b,".",parser.contID,0,anulable,primero,ultimo);
        parser.contID++;
        RESULT = nuevo_punto;
:}

| mas NOTACION_ERegular:a {:
        String primero = a.getPrimero();
        String ultimo = a.getUltimo();
        Nodo nuevo_mas = new Nodo(null,a,"+",parser.contID,0,"N",primero,ultimo);
        parser.contID++;
        RESULT = nuevo_mas;
:}

| asterisco NOTACION_ERegular:a {:
        String primero = a.getPrimero();
        String ultimo = a.getUltimo();
        Nodo nuevo_asterisco = new Nodo(null,a,"*",parser.contID,0,"A",primero,ultimo);
        parser.contID++;
        RESULT = nuevo_asterisco;
:}

| interrogante NOTACION_ERegular:a {:
        String primero = a.getPrimero();
        String ultimo = a.getUltimo();
        Nodo nuevo_interrogante = new Nodo(null,a,"?",parser.contID,0,"A",primero,ultimo);
        parser.contID++;
        RESULT = nuevo_interrogante;
:}

| id_ERegular:valor {:
        String primero = IDS+",";
        String ultimo = IDS+",";
        Nodo nuevo_id_ERegular = new Nodo(null,null,valor.replace("{","").replace("}",""),parser.contID,parser.IDS,"N",primero,ultimo);
        parser.IDS++;
        parser.contID++;
        RESULT = nuevo_id_ERegular;
:}

| c_Especial:valor {:
        String primero = IDS+",";
        String ultimo = IDS+",";
        Nodo nuevo_c_Especial = new Nodo(null,null,valor,parser.contID,parser.IDS,"N",primero,ultimo);
        parser.IDS++;
        parser.contID++;
        RESULT = nuevo_c_Especial;
:}

| c_ERegular:valor {:
        String primero = IDS+",";
        String ultimo = IDS+",";
        Nodo nuevo_c_ERegular = new Nodo(null,null,valor,parser.contID,parser.IDS,"N",primero,ultimo);
        parser.IDS++;
        parser.contID++;
        RESULT = nuevo_c_ERegular;
        :}
;